@page "/commands/{CommandName}"
@using BlackDragonAI_Manager.BlbApi
@using BlackDragonAI_Manager.BlbApi.Models
@inject BlbApiHandler BlbApiHandler
@inject NavigationManager NavigationManager

@if (InEditingMode)
{
    <h3>Edit Command</h3>
}
else
{
    <h3>Create Command</h3>
}

@* <div class="card text-white" @onclick="() => GoToCommandEditPage(command.OriginalCommand)" style="cursor: pointer !important"> *@
@*          <div class="card-body card-space"> *@
@*              <h5 class="card-title">@Command.OriginalCommand</h5> *@
@*              <p>@Command.Message</p> *@
@*          </div> *@
@*      </div> *@

@if (Command != null)
{
    <EditForm model="@Command" OnValidSubmit="SaveEdit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <p>
            <label>
                Command name:
                @if (InEditingMode)
                {
                    @Command.Command
                }
                else
                {
                    <InputText @bind-Value="Command.Command"></InputText>
                }
            </label>
        </p>
        <p>
            <label style="text-align: center; position: relative; top: -40px;">
                Message:
            </label>

            <InputTextArea style="width: 400px; height: 80px;" @bind-Value="Command.Message" />
        </p>
        <p>
            <label>
                Permission:
                <InputSelect @bind-Value="Command.Permission">
                    <option value="@EPermission.EVERYONE">Everyone</option>
                    <option value="@EPermission.SUBS">Subs</option>
                    <option value="@EPermission.MODS">Moderators</option>
                    <option value="@EPermission.ADMIN">Admins</option>
                </InputSelect>
            </label>
        </p>
        <p>
            <label>
                Cooldown timer:
                <InputNumber @bind-Value="Command.Timer" />
            </label>
        </p>
        @if (InEditingMode)
        {
            <button type="submit" style="font-size: 22px;">Save</button>
        }
        else
        {
            <button type="submit" style="font-size: 22px;">Create</button>
        }
    </EditForm>

    @if (InEditingMode)
    {
        <button @onclick="Delete" style="font-size: 22px; background-color: red; position: fixed; right: 25px; top: 25px; height: 50px; width: 150px;">Delete</button>

        <h3 style="margin-top: 30px;">Aliases</h3>
        <ul>
            @foreach (var alias in Aliases)
            {
                <li style="color: white;">
                    <p>
                        @alias.Substring(1)
                        <button style="background-color: red;" @onclick="() => DeleteAlias(alias)">Remove</button>
                    </p>
                </li>
            }
        </ul>
        <EditForm model="@NewAlias" OnValidSubmit="CreateAlias">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <p>
                <label>
                    New alias:
                    <InputText @bind-Value="NewAlias.Alias" />
                    <button type="submit">Add</button>
                </label>
            </p>
        </EditForm>
    }
}

@code {
    [Parameter] public string CommandName { get; set; }
    public bool InEditingMode;
    public CommandDetails Command;
    public IEnumerable<string> Aliases;
    public AliasInput NewAlias = new AliasInput();

    protected override async Task OnInitializedAsync()
    {
        var allCommands = await this.BlbApiHandler.GetAllCommands();
        var commandFromApi = allCommands.FirstOrDefault(c => c.Command.Equals(CommandName.ToLower()));
        this.InEditingMode = commandFromApi != null;
        if(InEditingMode)
        {
            Aliases = allCommands.Where(c => c.OriginalCommand.Equals(commandFromApi.OriginalCommand) && !c.Command.Equals(commandFromApi.Command)).Select(c => c.Command);
            Command = commandFromApi;
        }
        else
        {
            Command = new CommandDetails() { Command = "!" };
        }
    }

    private async Task<IEnumerable<string>> GetAliases() =>
        (await this.BlbApiHandler.GetAllCommands())
            .Where(c => c.OriginalCommand.Equals(this.Command.OriginalCommand) && !c.Command.Equals(this.Command.Command))
            .Select(c => c.Command);

    public async Task SaveEdit()
    {
        if (InEditingMode)
        {
            await this.BlbApiHandler.EditCommand(Command);
        }
        else
        {
            await this.BlbApiHandler.CreateCommand(Command);
        }
        NavigationManager.NavigateTo("commands");
    }

    public async Task Delete()
    {
        if(InEditingMode)
        {
            await this.BlbApiHandler.DeleteCommand(this.Command.Command);
            NavigationManager.NavigateTo("commands");
        }
    }

    public async Task CreateAlias()
    {
        if(InEditingMode)
        {
            NewAlias.Alias = $"!{NewAlias.Alias}";
            await this.BlbApiHandler.AddAlias(this.Command.OriginalCommand, NewAlias.Alias);
            this.Aliases = Aliases.Append(NewAlias.Alias);
            this.NewAlias = new AliasInput();
        }
    }

    public async Task DeleteAlias(string alias)
    {
        if(InEditingMode)
        {
            await this.BlbApiHandler.DeleteAlias(alias);
            this.Aliases = this.Aliases.Where(a => !a.Equals(alias));
        }
    }
}
