@page "/streams"
@inject BlbApiHandler BlbApiHandler
@inject ILocalStorageService LocalStorageService
@inject NavigationManager NavigationManager

<h1>Streams</h1>

@if (_isAdminOrHigher)
{
    <div style="position: absolute; right: 15px; top: 15px; width: fit-content;">
        <button @onclick="LoadDiscordStreamPlanning" style="min-width: 70px; min-height: 40px;">Load discord</button>
        <button @onclick="UpdateDiscordStreamPlannings" style="min-width: 70px; min-height: 40px;">Update discord</button>
    </div>
}

<div>
    @if (_streamPlannings != null)
    {
        @foreach (var sp in _streamPlannings)
        {
            <div class="card text-white col-lg-5 col-md-12 col-sm-12" @onclick="() => GoToEditPage(sp.Id)" style="cursor: pointer !important">
                <div class="card-body card-space">
                    <h3 class="card-title">@sp.Game - @sp.StreamType</h3>
                    <h5>@GetDayAbbreviation(sp.Date.DayOfWeek). @sp.Date.Day-@sp.Date.Month | @sp.TimeSlot</h5>
                    <p>@sp.GameType</p>
                    @* embed yt iFrame *@
                    <div style="position: relative; width: 100%; overflow: hidden; padding-top: 56.25%;">
                        <iframe style="position: absolute; top: 0; left: 0; bottom: 0; right: 0; width: 100%; height: 100%; border: none;"
                                                    src="@ConvertYoutubeUriToEmbeddedUri(sp.TrailerUri)" allow="encrypted-media"></iframe>
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    private IEnumerable<StreamPlanning> _streamPlannings;
    private bool _isAdminOrHigher = false;

    protected override async Task OnInitializedAsync()
    {
        await RetrieveStreamPlannings();
        this._isAdminOrHigher = await this.LocalStorageService.IsLoggedInAndMeetsAuthorizationLevel(EAuthorizationLevel.ADMIN);
    }

    private async Task RetrieveStreamPlannings()
    {
        this._streamPlannings = await this.BlbApiHandler.GetStreamPlannings();
    }
    
    private string GetDayAbbreviation(DayOfWeek dayOfWeek) => dayOfWeek switch
    {
        DayOfWeek.Monday => "Ma",
        DayOfWeek.Tuesday => "Di",
        DayOfWeek.Wednesday => "Wo",
        DayOfWeek.Thursday => "Do",
        DayOfWeek.Friday => "Vr",
        DayOfWeek.Saturday => "Za",
        DayOfWeek.Sunday => "Zo",
        _ => throw new ArgumentOutOfRangeException(nameof(dayOfWeek), dayOfWeek, null)
    };

    private string ConvertYoutubeUriToEmbeddedUri(string youtubeUri)
    {
        var properUri = youtubeUri.Replace("youtu.be", "youtube.com");
        var indexOfLastSlash = properUri.LastIndexOf("/", StringComparison.InvariantCultureIgnoreCase);
        return properUri.Insert(indexOfLastSlash + 1, "embed/");
    }

    // Load the discord stream planning and parse them
    private async Task LoadDiscordStreamPlanning()
    {
        await this.BlbApiHandler.LoadDiscordStreamPlannings();
        await this.RetrieveStreamPlannings();
    }

    // Writes the stream plannings in the database to the discord comment.
    private async Task UpdateDiscordStreamPlannings()
    {
        await this.BlbApiHandler.UpdateDiscordStreamPlannings();
    }
    
    private void GoToEditPage(long id)
    {
        this.NavigationManager.NavigateTo($"streams/{id}");
    }
}