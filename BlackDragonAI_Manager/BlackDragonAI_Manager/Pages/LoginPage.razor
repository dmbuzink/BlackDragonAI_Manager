@page "/login"
@using BlackDragonAI_Manager.BlbApi
@using BlackDragonAI_Manager.BlbApi.Models
@using Refit
@inject BlbApiHandler BlbApiHandler
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorageService

<link href="css/loginPage.min.css" rel="stylesheet">

<div>
    @if (_isAlreadyLoggedIn)
    {
        // Log out stuff
        <h3>Hi @_user.Username</h3>
        <button @onclick="LogOut">Log out</button>
    }
    else
    {
        <h3>Login</h3>
        // Log in stuff
        @if (_errorMessage != null)
        {
            <p style="color: red;">@_errorMessage</p>
        }
        <EditForm Model="@_user" OnValidSubmit="SubmitLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <p>
                <label>
                    Username:
                    <InputText id="username" @bind-Value="_user.Username" />
                </label>
            </p>

            <p>
                <label>
                    Password:
                    <InputText id="password" @bind-Value="_user.Password" />
                </label>
            </p>

            <button type="submit">log in</button>
        </EditForm>
    }
</div>




@code {
    private bool _isAlreadyLoggedIn;
    private User _user = new User();
    private string _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        const string storageKey = "user";
        if(await this.LocalStorageService.ContainKeyAsync(storageKey))
        {
            this._user = await this.LocalStorageService.GetItemAsync<User>(storageKey);
            _isAlreadyLoggedIn = true;
        }
    }

    public async Task SubmitLogin()
    {
        BlbApiHandler.SetupUser(_user);
        try
        {
            var result = await BlbApiHandler.Authenticate();
            Console.WriteLine("Successfully logged in");
            Console.WriteLine($"Token: {result.Token}");

            await LocalStorageService.SetItemAsync<User>("user", this._user);

            NavigationManager.NavigateTo("commands");
        }
        catch(ApiException apiException)
        {
            var apiError = apiException.ToBlbApiError();
            this._errorMessage = apiError.Message;
        }
    }

    public async Task LogOut()
    {
        await this.LocalStorageService.RemoveItemAsync("user");
        this._user = new User();
        _isAlreadyLoggedIn = false;
    }

}
